source('~/ThorDashboard/Body.R')
source('~/ThorDashboard/Body.R')
shinyApp(ui, server)
tabs <- c(
t1s <-menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
t2s <-  menuItem("Widgets", tabName = "widgets", icon = icon("plus-square"), menuSubItem("testone", tabName = "sub1", icon = icon("plus-square-o"))),
t3s <- menuItem("Charts", tabName = "charts", icon = icon("graph"))
)
t4s <-menuItem("NewTab", tabName = "newtab", icon = icon("graph"))
tabs <- append(tabs, t4s, after = length(tabs))
cTabItems <- c(
tab1 <-tabItem(tabName = "dashboard",
title = ("Old Faithful Geyser Data"),
h2= ("Settings 123"),
fluidRow(
tabBox(
#status = "warning",
title = "controls",
id = "selected_panel",
width = 12,
tabPanel("input", "Selector 1", sliderInput("bins", "Number of observations", 1,100,50)),
tabPanel("tab2", "Selector 2", sliderInput("slider2", "No. of Somethings", 1,100,23)),
tabPanel("tab3", h2("Empty"), checkboxInput("blnSolid", "make info box solid", FALSE)))
#box(drop)
),
fluidRow(
box(
title = "This Sample Chart",
h3 = "Histogram",
status = "primary",
plotOutput("distPlot"),
width = 12,
solidHeader = TRUE,
collapsible = TRUE
)
),
fluidRow(
# A static infoBox
infoBoxOutput("values"),
# Dynamic infoBoxes
infoBoxOutput("progressBox")
#infoBoxOutput("approvalBox")
)
),
tab2 <- tabItem(tabName = "widgets",
h2("Widgets tab content"),
shinyUI(navbarPage("My Application",
tabPanel("Component 1"),
tabPanel("Component 2"),
tabPanel("Component 3")
))
),
tab3 <- tabItem(tabName = "charts",
h1("ggPlot Charts"),
shinyUI(
fluidPage(
title = "Diamonds Explorer",
fluidRow(box(plotOutput('plot'), height = 725, width = 12)),
hr(),
fluidRow(
column(3,
h4("Diamonds Explorer"),
sliderInput('sampleSize', 'Sample Size',
min=1, max=nrow(dataset), value=min(1000, nrow(dataset)),
step=500, round=0),
br(),
checkboxInput('jitter', 'Jitter'),
checkboxInput('smooth', 'Smooth')
),
column(4, offset = 1,
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset)))
),
column(4,
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
)
)
)
)
)
)
tab4 <- tabItem(tabName = "newtab", h1("NewTab"), shinyUI(fluidPage(h1("testing"))))
cTabItems <- append(cTabItems, tab4, after = length(cTabItems))
source('~/ThorDashboard/Body.R')
shinyApp(ui, server)
tabs <- c(
t1s <-menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
t2s <-  menuItem("Widgets", tabName = "widgets", icon = icon("plus-square"), menuSubItem("testone", tabName = "sub1", icon = icon("plus-square-o"))),
t3s <- menuItem("Charts", tabName = "charts", icon = icon("graph"))
)
t4s <-menuItem("NewTab", tabName = "newtab", icon = icon("graph"))
tabs <- append(tabs, t4s, after = length(tabs))
d <- dashboardSidebar(
#id = "sidebarMenu" , #For Restoring the sidebar? Not working
sidebarSearchForm(textId = "searchText", buttonId = "searchButton",
label = "Search..."),
sidebarMenu(tabs))
)
d <- dashboardSidebar(
#id = "sidebarMenu" , #For Restoring the sidebar? Not working
sidebarSearchForm(textId = "searchText", buttonId = "searchButton",
label = "Search..."),
sidebarMenu(tabs))
d <- dashboardSidebar(
#id = "sidebarMenu" , #For Restoring the sidebar? Not working
sidebarSearchForm(textId = "searchText", buttonId = "searchButton",
label = "Search..."),
sidebarMenu(tabs))
d <- dashboardSidebar(
#id = "sidebarMenu" , #For Restoring the sidebar? Not working
#sidebarSearchForm(textId = "searchText", buttonId = "searchButton",
label = "Search..."),
sidebarMenu(tabs))
d <- dashboardSidebar(sidebarMenu(tabs))
de
d
e<-dashboardBody(tabItems(cTabItems))
e <- dashboardBody(tabItems(cTabItems))
e <- dashboardBody(tabItems(cTabItems(1:9)))
tabs
tabs(1:3)
tabs[1:3]
e <- dashboardBody(tabItems(cTabItems[1:9]))
cTabItems <- c(
tab1 <-tabItem(tabName = "dashboard",
title = ("Old Faithful Geyser Data"),
h2= ("Settings 123"),
fluidRow(
tabBox(
#status = "warning",
title = "controls",
id = "selected_panel",
width = 12,
tabPanel("input", "Selector 1", sliderInput("bins", "Number of observations", 1,100,50)),
tabPanel("tab2", "Selector 2", sliderInput("slider2", "No. of Somethings", 1,100,23)),
tabPanel("tab3", h2("Empty"), checkboxInput("blnSolid", "make info box solid", FALSE)))
#box(drop)
),
fluidRow(
box(
title = "This Sample Chart",
h3 = "Histogram",
status = "primary",
plotOutput("distPlot"),
width = 12,
solidHeader = TRUE,
collapsible = TRUE
)
),
fluidRow(
# A static infoBox
infoBoxOutput("values"),
# Dynamic infoBoxes
infoBoxOutput("progressBox")
#infoBoxOutput("approvalBox")
)
),
tab2 <- tabItem(tabName = "widgets",
h2("Widgets tab content"),
shinyUI(navbarPage("My Application",
tabPanel("Component 1"),
tabPanel("Component 2"),
tabPanel("Component 3")
))
),
tab3 <- tabItem(tabName = "charts",
h1("ggPlot Charts"),
shinyUI(
fluidPage(
title = "Diamonds Explorer",
fluidRow(box(plotOutput('plot'), height = 725, width = 12)),
hr(),
fluidRow(
column(3,
h4("Diamonds Explorer"),
sliderInput('sampleSize', 'Sample Size',
min=1, max=nrow(dataset), value=min(1000, nrow(dataset)),
step=500, round=0),
br(),
checkboxInput('jitter', 'Jitter'),
checkboxInput('smooth', 'Smooth')
),
column(4, offset = 1,
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset)))
),
column(4,
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
)
)
)
)
)
)
tab4 <- tabItem(tabName = "newtab", h1("NewTab"), shinyUI(fluidPage(h1("testing"))))
cTabItems <- append(cTabItems, tab4, after = length(cTabItems))
dashboardBody(
tabItems(cTabItems))
dashboardBody(
tabItems(cTabItems[1:3]))
dashboardBody(
tabItems(cTabItems[4:12]))
dashboardBody(
tabItems(cTabItems[10:12]))
c(1,2,3,4)[1:3]
source('~/ThorDashboard/Body.R')
source('~/ThorDashboard/Body.R')
source('~/ThorDashboard/Body.R')
source('~/ThorDashboard/Sidebar.R')
shinyApp(ui, server)
source('~/ThorDashboard/Sidebar.R')
source('~/ThorDashboard/Sidebar.R')
source('~/ThorDashboard/Body.R')
source('~/ThorDashboard/Body.R')
shinyApp(ui, server)
source('~/ThorDashboard/Sidebar.R')
shinyApp(ui, server)
source('~/ThorDashboard/Body.R')
shinyApp(ui, server)
source('~/ThorDashboard/Body.R')
shinyApp(ui, server)
source('~/ThorDashboard/Body.R')
source('~/ThorDashboard/Body.R')
shinyApp(ui, server)
funHeader()
funBody()
source('~/ThorDashboard/Body.R')
funBody()
shinyApp(app.R)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
library(ggplot2)
install.packages(ggplot2)
library("ggplot2", lib.loc="~/ThorDashboard/packrat/lib/x86_64-w64-mingw32/3.4.1")
shinyApp(ui, server)
source(app.R)
source('app.R')
shinyApp(ui, server)
install.packages("shinyjs")
install.packages(selectize)
datasets <- c("", "diamonds", "iris", "mtcars")
dataset <- datasets[1]
dataset
dataset <- eval(datasets[2])
dataset
diamonds
dataset <- as.expression(datasets[2])
dataset
dataset <- get(datasets[2])
dataset <- get(datasets[2])
dataset
dataset <- get(datasets[1])
dataset <- get(datasets[2])
dataset <- get(datasets[1])
datasets
datasets <- c(NULL, "diamonds", "iris", "mtcars")
datasets[1]
datasets <- c(NULL, "diamonds", "iris", "mtcars")
datasets[1]
datasets[2]
length(datasets)
c("", "diamonds", "iris", "mtcars")
datasets <- c("", "diamonds", "iris", "mtcars")
datasets[1] = ""
datasets[1] == ""
datasets[2] == ""
datasets[2] != ""
devtools::install_github(c(
'jeroenooms/jsonlite'
, 'rstudio/shiny'
, 'ramnathv/htmlwidgets'
))
devtools::install_github(c(
'jeroenooms/jsonlite'
, 'rstudio/shiny'
, 'ramnathv/htmlwidgets'
))
devtools::install_github('jeroenooms/jsonlite')
install.packages(jsonlite)
install.packages('jsonlite')
?install.packages
.libPaths()
.libPaths(C:\Program Files\R\R-3.4.1\library)
.libPaths("C:\Program Files\R\R-3.4.1\library")
.libPaths("C:\\Program Files\\R\\R-3.4.1\\library")
.libPaths()
.libPaths("C://Users//s163837//Documents//ThorDashboard//packrat//lib-ext")
.libPaths()
.libPaths("C://Users//s163837//Documents//ThorDashboard//packrat//lib-ext")
.libPaths("C:\\Program Files\\R\\R-3.4.1\\library")
.libPaths()
source('app.R')
source('app.R')
install.packages("htmlwidgets")
install.packages("htmlwidgets")
.libPaths("C://Users//s163837//Documents//ThorDashboard//packrat//lib-ext")
install.packages("htmlwidgets")
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui <- ui, server <- server)
clear()
rm(*)
rm(ls())
rm(list = ls())
shinyApp(ui <- ui, server <- server)
source('app.R')
source('app.R')
rmarkdown::shiny_prerendered_clean('app.R')
install.packages("rmarkdown")
rmarkdown::shiny_prerendered_clean('app.R')
source('app.R')
?observeEvent
observeEvent( input$seldataset, {
#toggleState("t4_x", condition = (input$seldataset != "") )
#toggleState("t4_y", condition = (input$seldataset != "") )
if(input$seldataset != ""){
dataset <- get(input$seldataset)
shinyjs::enable("t4_x")
shinyjs::enable("t4_y")
} else {
dataset <- ""
shinyjs::disable("t4_x")
shinyjs::disable("t4_y")
}
})
source('app.R')
source('app.R')
source('app.R')
source('app.R')
nrow(diamonds)
source('app.R')
source('app.R')
source('app.R')
source('app.R')
d<- c("", "diamonds")
names(d[2])
names(d[1])
names(get(d[1])
)
names(get(d[1]))
names(get(d[2]))
blank = as.data.frame("","")
names(blank)
datasets <- c(blank, "diamonds", "iris", "mtcars")
names(blank)
datasets
datasets[2]
datasets[3]
datasets[1]
source('app.R')
source('app.R')
source('app.R')
source('app.R')
install.packages(jsonlite)
install.packages("jsonlite")
library("jsonlite", lib.loc="~/ThorDashboard/packrat/lib-ext")
detach("package:jsonlite", unload=TRUE)
install.packages("jsonlite")
source('app.R')
shinyApp(ui, server)
source('app.R')
source('app.R')
shinyApp(ui, server)
source('app.R')
source('app.R')
shinyApp(ui, server)
if (interactive()) {
library(shiny)
# ========== Dynamic sidebarMenu ==========
ui <- dashboardPage(
dashboardHeader(title = "Dynamic sidebar"),
dashboardSidebar(
sidebarMenuOutput("menu")
),
dashboardBody()
)
server <- function(input, output) {
output$menu <- renderMenu({
sidebarMenu(
menuItem("Menu item", icon = icon("calendar"))
)
})
}
shinyApp(ui, server)
)
if (interactive()) {
library(shiny)
# ========== Dynamic sidebarMenu ==========
ui <- dashboardPage(
dashboardHeader(title = "Dynamic sidebar"),
dashboardSidebar(
sidebarMenuOutput("menu")
),
dashboardBody()
)
server <- function(input, output) {
output$menu <- renderMenu({
sidebarMenu(
menuItem("Menu item", icon = icon("calendar"))
)
})
}
shinyApp(ui, server)
}
# ========== Dynamic dropdownMenu ==========
# Example message data in a data frame
messageData <- data.frame(
from = c("Admininstrator", "New User", "Support"),
message = c(
"Sales are steady this month.",
"How do I register?",
"The new server is ready."
),
stringsAsFactors = FALSE
)
ui <- dashboardPage(
dashboardHeader(
title = "Dynamic menus",
dropdownMenuOutput("messageMenu")
),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
output$messageMenu <- renderMenu({
# Code to generate each of the messageItems here, in a list. messageData
# is a data frame with two columns, 'from' and 'message'.
# Also add on slider value to the message content, so that messages update.
msgs <- apply(messageData, 1, function(row) {
messageItem(
from = row[["from"]],
message = paste(row[["message"]], input$slider)
)
})
dropdownMenu(type = "messages", .list = msgs)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
rmarkdown::shiny_prerendered_clean('app.R')
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
rm(ui)
rm(server
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x
}
