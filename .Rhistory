#cran
#cran shinydashboard
install.packages("shinydashboard")
install.packages(leaflet)
install.packages("leaflet")
shinyApp(us, server())
shinyApp(ui, server
)
library(shiny)
install.packages(c("abind", "acepack", "acs", "arulesViz", "assertthat", "BH", "Boruta", "cairoDevice", "car", "caret", "cba", "choroplethr", "choroplethrMaps", "chron", "classInt", "coin", "colorspace", "crayon", "curl", "data.table", "DBI", "dendextend", "DEoptimR", "devtools", "digest", "dplyr", "e1071", "epiR", "evaluate", "fields", "flexmix", "foreign", "formatR", "Formula", "gdata", "ggplot2", "git2r", "gridExtra", "gss", "gWidgetsRGtk2", "Hmisc", "htmltools", "httr", "igraph", "irlba", "jsonlite", "kernlab", "knitr", "lme4", "lmtest", "mapproj", "maps", "maptools", "markdown", "Matrix", "mclust", "memoise", "mice", "mime", "mnormt", "multcomp", "mvtnorm", "NLP", "openintro", "openssl", "packrat", "party", "pbkrtest", "plotrix", "pmml", "pROC", "proto", "psych", "qap", "quantreg", "R6", "ranger", "rattle", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "readxl", "reshape", "reshape2", "rgdal", "rggobi", "RgoogleMaps", "rmarkdown", "robustbase", "RODBC", "roxygen2", "rpart", "rpart.plot", "rstudioapi", "rversions", "sandwich", "scales", "scatterplot3d", "seriation", "slam", "sp", "spam", "SparseM", "stabledist", "stringi", "stringr", "survival", "swirl", "TH.data", "tm", "tseries", "TSP", "vcd", "withr", "xgboost", "XML", "xml2", "yaml", "zoo"))
detach("package:shiny", unload=TRUE)
library("shiny", lib.loc="~/R/win-library/3.3")
library("shinydashboard", lib.loc="~/R/win-library/3.3")
R.version()
R.Version()
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
R.Version()
library(shiny)
install.packages("shiny")
install(ggplot, shinydashboard)
install.packages("shinydashboard", "ggplot")
install.packages("shinydashboard")
install.packages("ggplot")
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
install.packages("graphicsQC")
if (interactive()) {
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic boxes"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(width = 2, actionButton("count", "Count")),
infoBoxOutput("ibox"),
valueBoxOutput("vbox")
)
)
)
server <- function(input, output) {
output$ibox <- renderInfoBox({
infoBox(
"Title",
input$count,
icon = icon("credit-card")
)
})
output$vbox <- renderValueBox({
valueBox(
"Title",
input$count,
icon = icon("credit-card")
)
})
}
shinyApp(ui, server)
}
library(shiny, shinydashboard)
library([shiny, shinydashboard])
library(shinydashboard)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
detach(shinydashboard)
detach("package:shinydashboard", unload=TRUE)
library("shinydashboard", lib.loc="~/R/win-library/3.4")
shinyApp(ui, server)
detach("package:shiny", unload=TRUE)
detach("package:shinydashboard", unload=TRUE)
library("shinydashboard", lib.loc="~/R/win-library/3.4")
library("shiny", lib.loc="~/R/win-library/3.4")
rm(server())
rm(server
)
rm(ui)
shinyApp(ui, server)
server <- server.R
run(app.R)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
View(server)
View(server)
rm(server)
rm(ui)
source("ui.R")
source("server.R")
shinyApp(ui, server)
ui <- source("ui.R")
server <-souce(server.R)
server <-source(server.R)
shinyApp(ui.R, server.R)
shinyApp(ui.R, server.R)
dir()
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
faithful
source('~/ThorDashboard/app.R')
faithful
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
get0(input$slider2, ifnotfound = max(faithful[,1]))
get0(input$slider2, ifnotfound = 5)
!is.null(input$slider)
!is.null(slider)
exists(slider)
source('~/ThorDashboard/app.R')
exists(slider)
shinyApp(ui, server)
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
install.packages(ggplot)
install.packages("ggplot2")
install.packages("ggplot2gui")
install.packages("ggplotgui")
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
install.packages("ggplotgui")
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
source('~/ThorDashboard/app.R')
shinyApp(ui, server)
runApp()
runApp()
shinyApp(ui, server)
path.expand()
path.expand(path)
path.expand?
()
path.expand()?
)
path.expand(home)
path.expand(~ThorData)
path.expand(~/ThorData)
path.expand(~\ThorData)
shinyApp(ui, server)
tabItem(tabName = "dashboard",
title = ("Old Faithful Geyser Data"),
h2= ("Settings 123"),
fluidRow(
tabBox(
#status = "warning",
title = "controls",
id = "selected_panel",
width = 12,
tabPanel("input", "Selector 1", sliderInput("bins", "Number of observations", 1,100,50)),
tabPanel("tab2", "Selector 2", sliderInput("slider2", "No. of Somethings", 1,100,23)),
tabPanel("tab3", h2("Empty"), checkboxInput("blnSolid", "make info box solid", FALSE)))
#box(drop)
)
)
